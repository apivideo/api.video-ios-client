//
// Summary.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Summary: Codable, Hashable {

    public enum Origin: String, Codable, CaseIterable {
        case api = "api"
        case auto = "auto"
    }
    public enum SourceStatus: String, Codable, CaseIterable {
        case missing = "missing"
        case waiting = "waiting"
        case failed = "failed"
        case completed = "completed"
        case unprocessable = "unprocessable"
    }
    /** The unique identifier of the summary object. */
    public var summaryId: String?
    /** Returns the date and time when the summary was created in ATOM date-time format. */
    public var createdAt: Date?
    /** Returns the date and time when the summary was last updated in ATOM date-time format. */
    public var updatedAt: Date?
    /** The unique identifier of the video object. */
    public var videoId: String?
    /** Returns the origin of how the summary was created.  - `api` means that no summary was generated automatically. You can add summary manually using the `PATCH /summaries/{summaryId}/source` endpoint operation. Until this happens, `sourceStatus` returns `missing`. - `auto` means that the API generated the summary automatically. */
    public var origin: Origin?
    /** Returns the current status of summary generation.  `missing`: the input for a summary is not present. `waiting` : the input video is being processed and a summary will be generated. `failed`: a technical issue prevented summary generation. `completed`: the summary is generated. `unprocessable`: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio. */
    public var sourceStatus: SourceStatus?

    public init(summaryId: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil, videoId: String? = nil, origin: Origin? = nil, sourceStatus: SourceStatus? = nil) {
        self.summaryId = summaryId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.videoId = videoId
        self.origin = origin
        self.sourceStatus = sourceStatus
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case summaryId
        case createdAt
        case updatedAt
        case videoId
        case origin
        case sourceStatus
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(summaryId, forKey: .summaryId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(videoId, forKey: .videoId)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(sourceStatus, forKey: .sourceStatus)
    }
}

