//
// VideoUpdatePayload.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VideoUpdatePayload: Codable, Hashable {

    public enum Language: String, Codable, CaseIterable {
        case ar = "ar"
        case ca = "ca"
        case cs = "cs"
        case da = "da"
        case de = "de"
        case el = "el"
        case en = "en"
        case es = "es"
        case fa = "fa"
        case fi = "fi"
        case fr = "fr"
        case he = "he"
        case hi = "hi"
        case hr = "hr"
        case hu = "hu"
        case it = "it"
        case ja = "ja"
        case ko = "ko"
        case ml = "ml"
        case nl = "nl"
        case nn = "nn"
        case _false = "false"
        case pl = "pl"
        case pt = "pt"
        case ru = "ru"
        case sk = "sk"
        case sl = "sl"
        case te = "te"
        case tr = "tr"
        case uk = "uk"
        case ur = "ur"
        case vi = "vi"
        case zh = "zh"
    }
    public enum TranscriptSummaryAttributes: String, Codable, CaseIterable {
        case abstract = "abstract"
        case takeaways = "takeaways"
    }
    /** The unique ID for the player you want to associate with your video. */
    public var playerId: NullableString?
    /** The title you want to use for your video. */
    public var title: String?
    /** A brief description of the video. */
    public var description: String?
    /** Whether the video is publicly available or not. False means it is set to private. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos/). */
    public var _public: Bool?
    /** Whether the video is a 360 degree or immersive video. */
    public var panoramic: Bool?
    /** Whether the player supports the mp4 format. */
    public var mp4Support: Bool?
    /** A list of terms or words you want to tag the video with. Make sure the list includes all the tags you want as whatever you send in this list will overwrite the existing list for the video. */
    public var tags: [String]?
    /** A list (array) of dictionaries where each dictionary contains a key value pair that describes the video. As with tags, you must send the complete list of metadata you want as whatever you send here will overwrite the existing metadata for the video. */
    public var metadata: [Metadata]?
    /** Use this parameter to set the language of the video. When this parameter is set, the API creates a transcript of the video using the language you specify. You must use the [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) format.  `language` is a permanent attribute of the video. You can update it to another language using the [`PATCH /videos/{videoId}`](https://docs.api.video/reference/api/Videos#update-a-video-object) operation. This triggers the API to generate a new transcript using a different language. */
    public var language: Language?
    /** Use this parameter to enable transcription.   - When `true`, the API generates a transcript for the video. - The default value is `false`. - If you define a video language using the `language` parameter, the API uses that language to transcribe the video. If you do not define a language, the API detects it based on the video.  - When the API generates a transcript, it will be available as a caption for the video. */
    public var transcript: Bool?
    /** Use this parameter to enable summarization.   - When `true`, the API generates a summary for the video, based on the transcription. - The default value is `false`. - If you define a video language using the `language` parameter, the API uses that language to summarize the video. If you do not define a language, the API detects it based on the video. */
    public var transcriptSummary: Bool?
    /** Use this parameter to define the elements of a summary that you want to generate. If you do not define this parameter, the API generates a full summary with all attributes. */
    public var transcriptSummaryAttributes: [TranscriptSummaryAttributes]?

    public init(playerId: NullableString? = nil, title: String? = nil, description: String? = nil, _public: Bool? = nil, panoramic: Bool? = nil, mp4Support: Bool? = nil, tags: [String]? = nil, metadata: [Metadata]? = nil, language: Language? = nil, transcript: Bool? = nil, transcriptSummary: Bool? = nil, transcriptSummaryAttributes: [TranscriptSummaryAttributes]? = nil) {
        self.playerId = playerId
        self.title = title
        self.description = description
        self._public = _public
        self.panoramic = panoramic
        self.mp4Support = mp4Support
        self.tags = tags
        self.metadata = metadata
        self.language = language
        self.transcript = transcript
        self.transcriptSummary = transcriptSummary
        self.transcriptSummaryAttributes = transcriptSummaryAttributes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case playerId
        case title
        case description
        case _public = "public"
        case panoramic
        case mp4Support
        case tags
        case metadata
        case language
        case transcript
        case transcriptSummary
        case transcriptSummaryAttributes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(playerId, forKey: .playerId)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(_public, forKey: ._public)
        try container.encodeIfPresent(panoramic, forKey: .panoramic)
        try container.encodeIfPresent(mp4Support, forKey: .mp4Support)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(transcript, forKey: .transcript)
        try container.encodeIfPresent(transcriptSummary, forKey: .transcriptSummary)
        try container.encodeIfPresent(transcriptSummaryAttributes, forKey: .transcriptSummaryAttributes)
    }
}

