//
// SummariesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SummariesAPI {

    /**
     Generate video summary
     
     - parameter summaryCreationPayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func create(summaryCreationPayload: SummaryCreationPayload, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping ((_ data: Summary?, _ error: Error?) -> Void)) -> RequestTask {
        return create(summaryCreationPayload: summaryCreationPayload, apiResponseQueue: apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate video summary
     
     - parameter summaryCreationPayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result of the request (incl. headers).
     */
    @discardableResult
    open class func create(summaryCreationPayload: SummaryCreationPayload, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping (_ result: Swift.Result<Response<Summary>, ErrorResponse>) -> Void) -> RequestTask {
            return createWithRequestBuilder(summaryCreationPayload: summaryCreationPayload).execute(apiResponseQueue, completion)
    }


    /**
     Generate video summary
     - POST /summaries
     - Generate a title, abstract, and key takeaways for a video.
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Retry-After(Int)]
     - parameter summaryCreationPayload: (body)  
     - returns: RequestBuilder<Summary> 
     */
    internal class func createWithRequestBuilder(summaryCreationPayload: SummaryCreationPayload) -> RequestBuilder<Summary> {
        let localVariablePath = "/summaries"
        let localVariableURLString = ApiVideoClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: summaryCreationPayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Summary>.Type = ApiVideoClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }


    /**
     Update summary details
     
     - parameter summaryId: (path) The unique identifier of the summary source you want to update. 
     - parameter summaryUpdatePayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func update(summaryId: String, summaryUpdatePayload: SummaryUpdatePayload, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping ((_ data: SummarySource?, _ error: Error?) -> Void)) -> RequestTask {
        return update(summaryId: summaryId, summaryUpdatePayload: summaryUpdatePayload, apiResponseQueue: apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update summary details
     
     - parameter summaryId: (path) The unique identifier of the summary source you want to update. 
     - parameter summaryUpdatePayload: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result of the request (incl. headers).
     */
    @discardableResult
    open class func update(summaryId: String, summaryUpdatePayload: SummaryUpdatePayload, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping (_ result: Swift.Result<Response<SummarySource>, ErrorResponse>) -> Void) -> RequestTask {
            return updateWithRequestBuilder(summaryId: summaryId, summaryUpdatePayload: summaryUpdatePayload).execute(apiResponseQueue, completion)
    }


    /**
     Update summary details
     - PATCH /summaries/{summaryId}/source
     - Update details for a summary. Note that this operation is only allowed for summary objects where `sourceStatus` is `missing`.
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Retry-After(Int)]
     - parameter summaryId: (path) The unique identifier of the summary source you want to update. 
     - parameter summaryUpdatePayload: (body)  
     - returns: RequestBuilder<SummarySource> 
     */
    internal class func updateWithRequestBuilder(summaryId: String, summaryUpdatePayload: SummaryUpdatePayload) -> RequestBuilder<SummarySource> {
        var localVariablePath = "/summaries/{summaryId}/source"
        let summaryIdPreEscape = "\(APIHelper.mapValueToPathItem(summaryId))"
        let summaryIdPostEscape = summaryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{summaryId}", with: summaryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ApiVideoClient.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: summaryUpdatePayload)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SummarySource>.Type = ApiVideoClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }


    /**
     Delete video summary
     
     - parameter summaryId: (path) The unique identifier of the summary you want to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func delete(summaryId: String, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return delete(summaryId: summaryId, apiResponseQueue: apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete video summary
     
     - parameter summaryId: (path) The unique identifier of the summary you want to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result of the request (incl. headers).
     */
    @discardableResult
    open class func delete(summaryId: String, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping (_ result: Swift.Result<Response<Void>, ErrorResponse>) -> Void) -> RequestTask {
            return deleteWithRequestBuilder(summaryId: summaryId).execute(apiResponseQueue, completion)
    }


    /**
     Delete video summary
     - DELETE /summaries/{summaryId}
     - Delete a summary tied to a video.
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Retry-After(Int)]
     - parameter summaryId: (path) The unique identifier of the summary you want to delete. 
     - returns: RequestBuilder<Void> 
     */
    internal class func deleteWithRequestBuilder(summaryId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/summaries/{summaryId}"
        let summaryIdPreEscape = "\(APIHelper.mapValueToPathItem(summaryId))"
        let summaryIdPostEscape = summaryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{summaryId}", with: summaryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ApiVideoClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = ApiVideoClient.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }


    /**
     * enum for parameter origin
     */
    public enum OriginList: String, CaseIterable {
        case auto = "auto"
        case api = "api"
    }

    /**
     * enum for parameter sourceStatus
     */
    public enum SourceStatusList: String, CaseIterable {
        case missing = "missing"
        case waiting = "waiting"
        case failed = "failed"
        case completed = "completed"
        case unprocessable = "unprocessable"
    }

    /**
     * enum for parameter sortBy
     */
    public enum SortByList: String, CaseIterable {
        case createdat = "createdAt"
        case updatedat = "updatedAt"
        case videoid = "videoId"
    }

    /**
     * enum for parameter sortOrder
     */
    public enum SortOrderList: String, CaseIterable {
        case asc = "asc"
        case desc = "desc"
    }

    /**
     List summaries
     
     - parameter videoId: (query) Use this parameter to filter for a summary that belongs to a specific video. (optional)
     - parameter origin: (query) Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)
     - parameter sourceStatus: (query) Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)
     - parameter sortBy: (query) Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)
     - parameter sortOrder: (query) Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)
     - parameter currentPage: (query) Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     - parameter pageSize: (query) Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func list(videoId: String? = nil, origin: OriginList? = nil, sourceStatus: SourceStatusList? = nil, sortBy: SortByList? = nil, sortOrder: SortOrderList? = nil, currentPage: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping ((_ data: SummariesListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return list(videoId: videoId, origin: origin, sourceStatus: sourceStatus, sortBy: sortBy, sortOrder: sortOrder, currentPage: currentPage, pageSize: pageSize, apiResponseQueue: apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List summaries
     
     - parameter videoId: (query) Use this parameter to filter for a summary that belongs to a specific video. (optional)
     - parameter origin: (query) Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)
     - parameter sourceStatus: (query) Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)
     - parameter sortBy: (query) Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)
     - parameter sortOrder: (query) Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)
     - parameter currentPage: (query) Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     - parameter pageSize: (query) Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result of the request (incl. headers).
     */
    @discardableResult
    open class func list(videoId: String? = nil, origin: OriginList? = nil, sourceStatus: SourceStatusList? = nil, sortBy: SortByList? = nil, sortOrder: SortOrderList? = nil, currentPage: Int? = nil, pageSize: Int? = nil, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping (_ result: Swift.Result<Response<SummariesListResponse>, ErrorResponse>) -> Void) -> RequestTask {
            return listWithRequestBuilder(videoId: videoId, origin: origin, sourceStatus: sourceStatus, sortBy: sortBy, sortOrder: sortOrder, currentPage: currentPage, pageSize: pageSize).execute(apiResponseQueue, completion)
    }


    /**
     List summaries
     - GET /summaries
     - List all summarries for your videos in a project.
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Retry-After(Int)]
     - parameter videoId: (query) Use this parameter to filter for a summary that belongs to a specific video. (optional)
     - parameter origin: (query) Use this parameter to filter for summaries based on the way they were created: automatically or manually via the API. (optional)
     - parameter sourceStatus: (query) Use this parameter to filter for summaries based on the current status of the summary source.  These are the available statuses:  &#x60;missing&#x60;: the input for a summary is not present. &#x60;waiting&#x60; : the input video is being processed and a summary will be generated. &#x60;failed&#x60;: a technical issue prevented summary generation. &#x60;completed&#x60;: the summary is generated. &#x60;unprocessable&#x60;: the API rules the source video to be unsuitable for summary generation. An example for this is an input video that has no audio.  (optional)
     - parameter sortBy: (query) Use this parameter to choose which field the API will use to sort the response data. The default is &#x60;value&#x60;.  These are the available fields to sort by:  - &#x60;createdAt&#x60;: Sorts the results based on date and timestamps when summaries were created. - &#x60;updatedAt&#x60;: Sorts the results based on date and timestamps when summaries were last updated. - &#x60;videoId&#x60;: Sorts the results based on video IDs.  (optional)
     - parameter sortOrder: (query) Use this parameter to sort results. &#x60;asc&#x60; is ascending and sorts from A to Z. &#x60;desc&#x60; is descending and sorts from Z to A. (optional)
     - parameter currentPage: (query) Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     - parameter pageSize: (query) Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     - returns: RequestBuilder<SummariesListResponse> 
     */
    internal class func listWithRequestBuilder(videoId: String? = nil, origin: OriginList? = nil, sourceStatus: SourceStatusList? = nil, sortBy: SortByList? = nil, sortOrder: SortOrderList? = nil, currentPage: Int? = nil, pageSize: Int? = nil) -> RequestBuilder<SummariesListResponse> {
        let localVariablePath = "/summaries"
        let localVariableURLString = ApiVideoClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "videoId": videoId?.encodeToJSON(),
            "origin": origin?.encodeToJSON(),
            "sourceStatus": sourceStatus?.encodeToJSON(),
            "sortBy": sortBy?.encodeToJSON(),
            "sortOrder": sortOrder?.encodeToJSON(),
            "currentPage": currentPage?.encodeToJSON(),
            "pageSize": pageSize?.encodeToJSON(),
        ])
        

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SummariesListResponse>.Type = ApiVideoClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }


    /**
     Get summary details
     
     - parameter summaryId: (path) The unique identifier of the summary source you want to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects.
     */
    @discardableResult
    open class func getSummarySource(summaryId: String, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping ((_ data: SummarySource?, _ error: Error?) -> Void)) -> RequestTask {
        return getSummarySource(summaryId: summaryId, apiResponseQueue: apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get summary details
     
     - parameter summaryId: (path) The unique identifier of the summary source you want to retrieve. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the result of the request (incl. headers).
     */
    @discardableResult
    open class func getSummarySource(summaryId: String, apiResponseQueue: DispatchQueue = ApiVideoClient.apiResponseQueue, completion: @escaping (_ result: Swift.Result<Response<SummarySource>, ErrorResponse>) -> Void) -> RequestTask {
            return getSummarySourceWithRequestBuilder(summaryId: summaryId).execute(apiResponseQueue, completion)
    }


    /**
     Get summary details
     - GET /summaries/{summaryId}/source
     - Get all details for a summary.
     - responseHeaders: [X-RateLimit-Limit(Int), X-RateLimit-Remaining(Int), X-RateLimit-Retry-After(Int)]
     - parameter summaryId: (path) The unique identifier of the summary source you want to retrieve. 
     - returns: RequestBuilder<SummarySource> 
     */
    internal class func getSummarySourceWithRequestBuilder(summaryId: String) -> RequestBuilder<SummarySource> {
        var localVariablePath = "/summaries/{summaryId}/source"
        let summaryIdPreEscape = "\(APIHelper.mapValueToPathItem(summaryId))"
        let summaryIdPostEscape = summaryIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{summaryId}", with: summaryIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = ApiVideoClient.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SummarySource>.Type = ApiVideoClient.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

}
